#!/usr/bin/env ruby -w
# coding: utf-8

if File.exists?(File.join(File.expand_path('../..', __FILE__), '.git'))
  railties_path = File.expand_path('../../lib', __FILE__)
  $:.unshift(railties_path)
end

require 'optparse'
require 'cryptobox'

$verbose = false
options = {
  update: true,
  edit: true,
  stdout: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($PROGRAM_NAME)} [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    $verbose = v
  end
  opts.on("-e", "--[no-]edit", "Run editor (default)") do |v|
    options[:edit] = v
  end
  opts.on("-u", "--[no-]update", "Generate HTML (default)") do |v|
    options[:update] = v
  end
  opts.on("--stdout", "Print decrypted data to standard output") do |v|
    options[:stdout] = v
  end
  opts.on("-c", "--config PATH", "Configuration file path") do |path|
    options[:config] = path
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version") do
    puts "Cryptobox #{Cryptobox::VERSION}"
    exit
  end
end.parse!

config = Cryptobox::Config.new options[:config]
db = Cryptobox::Db.new config[:path][:cryptobox],
                       config[:path][:backup],
                       config[:cryptobox][:keep_backups]
db.load

if options[:stdout]
  $stdout.puts db.plaintext
  exit
end

if options[:edit]
  new_plaintext = edit config[:ui][:editor], db.plaintext
  exit if new_plaintext == db.plaintext

  db.plaintext = new_plaintext
  db.save
end

if options[:update]
  JsonOutput.new(config, db).run

  DesktopHtmlOutput.new(config).run
  MobileHtmlOutput.new(config).run

  FillBookmarkletOutput.new(config).run
  FormBookmarkletOutput.new(config).run

  ChromeOutput.new(config).run
end
