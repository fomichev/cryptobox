#!/usr/bin/env ruby -w

if File.exists?(File.join(File.expand_path('../..', __FILE__), '.git'))
  railties_path = File.expand_path('../../lib', __FILE__)
  $:.unshift(railties_path)
end

require 'json'

require 'optparse'
require 'cryptobox'

$verbose = false
options = {
  filter: [],
  interactive: true
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($PROGRAM_NAME)} [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    $verbose = v
  end
  opts.on("--[no-]interactive", "Open /dev/tty to read password") do |v|
    options[:interactive] = v
  end
  opts.on("-c", "--config PATH", "Configuration file path") do |path|
    options[:config] = path
  end
  opts.on("-f", "--filter KEY=VALUE", "Filter entries by given KEY with VALUE; multiple filter argument are ANDed") do |filter|
    a = filter.split(/=/)
    exit 3 if a.size != 2 #TODO: add error printout

    options[:filter] << a
  end
  opts.on("-k", "--key KEY", "Print value of the given key if number of filtered items is 1") do |key|
    options[:key] = key
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version") do
    puts "Cryptobox #{Cryptobox::VERSION}"
    exit
  end
end.parse!

config = Cryptobox::Config.new options[:config]
db = Cryptobox::Db.new config[:path][:cryptobox],
                       config[:path][:backup],
                       config[:cryptobox][:keep_backups],
                       Cryptobox::ask_password('Password:', options[:interactive])
db.load

entries = []
db.each do |vars, _|
  add = true

  if options[:filter].size != 0
    options[:filter].each do |k, v|
      if not vars.has_key? k.to_sym or not vars[k.to_sym] == v
        add = false
        next
      end
    end
  end

  entries << vars if add
end

if options[:key]
  k = options[:key].to_sym

  exit 1 if entries.size != 1 # TODO: add error printout
  exit 2 if not entries[0].has_key? k # TODO: add error printout

  print entries[0][k]
else
  puts JSON.pretty_generate entries
end
