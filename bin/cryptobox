#!/usr/bin/env ruby

if File.exists?(File.join(File.expand_path('../..', __FILE__), '.git'))
  $:.unshift(File.expand_path('../../lib', __FILE__))
end

require 'gli'
require 'json'
require 'em-websocket'

require 'cryptobox'

$verbose = false
config = nil

include GLI::App

program_desc 'Secure sensitive information manager'

version Cryptobox::VERSION

desc 'Run verbosely'
switch [:v,:verbose], :negatable => false

desc 'Open /dev/tty to read password'
switch [:nointeractive], :negatable => false

desc 'Configuration file path'
arg_name 'PATH'
flag [:c,:config]

pre do |global,command,options,args|
  config = Cryptobox::Config.new global[:config]

  $verbose = false if global.has_key? :noverbose
  options[:interactive] = true
  options[:interactive] = false if global.has_key? :nointeractive

  true
end

arg_name 'filter', :multiple
command :cat do |c|
  c.desc 'Print value of the given key if number of filtered items is 1'
  c.arg_name 'KEY'
  c.flag [:k,:key]

  c.action do |global_options, options, args|
    command_cat(config, options, args);
  end
end

def command_cat(config, options, args)
  # TODO
  db = Cryptobox::Db.new config[:path][:cryptobox],
    config[:path][:backup],
    config[:cryptobox][:keep_backups],
    Cryptobox::ask_password('Password:', options[:interactive])
  db.load

  entries = []
  db.each do |vars, _|
    add = true

    if args.size != 0
      args.each do |filter|
        k, v = filter.split(/=/)

        if not vars.has_key? k.to_sym or not vars[k.to_sym] == v
          add = false
          next
        end
      end
    end

    entries << vars if add
  end

  if options[:key]
    k = options[:key].to_sym

    exit_now!('Too many entries', 1) if entries.size != 1
    exit_now!('Key is not found', 2) if not entries[0].has_key? k # TODO: add error printout

    print entries[0][k]
  else
    puts JSON.pretty_generate entries
  end
end

desc 'Create new empty database'
command :create do |c|
  c.action do |global_options, options, args|
    command_create(config, options, args);
  end
end

def command_create(config, options, args)
  if File.exist? config[:path][:cryptobox]
    return unless Cryptobox::yn "Database already exists, do you want to overwrite it?"
  end

  db = Cryptobox::Db.new config[:path][:cryptobox],
    config[:path][:backup],
    config[:cryptobox][:keep_backups],
    Cryptobox::ask_password('Password:', options[:interactive])
  begin
    db.create Cryptobox::ask_password('Confirm password:', options[:interactive])

    db.plaintext = '# Lines started with # are comments'
    db.save
  rescue => error
    $stdout.flush
    exit_now!(error.message, 1)
  end
end

desc 'Edit database'
command :edit do |c|
  c.desc 'Don\'t start editor, just process current database'
  c.switch [:noedit], :negatable => false

  c.desc 'Don\'t process database and generate applications'
  c.switch [:noupdate], :negatable => false

  c.desc 'Print decrypted data to standard output'
  c.switch [:stdout], :negatable => false

  c.desc 'Read decrypted data from standard input'
  c.switch [:stdin], :negatable => false

  c.desc 'Don\'t use named fifo for data exchange with editor'
  c.switch [:nopipe], :negatable => false

  c.action do |global_options, options, args|
    command_edit(config, options, args);
  end
end

def command_edit(config, options, args)
  db = Cryptobox::Db.new config[:path][:cryptobox],
    config[:path][:backup],
    config[:cryptobox][:keep_backups],
    Cryptobox::ask_password('Password:', options[:interactive])
  db.load

  if options[:stdout]
    $stdout.puts db.plaintext
    return
  end

  unless options[:noedit]
    if options[:stdin]
      db.plaintext = $stdin.read
    else
      new_plaintext = edit config[:path][:home], config[:ui][:editor], db.plaintext, options[:pipe]
      return if new_plaintext == db.plaintext

      db.plaintext = new_plaintext
    end

    db.save
  end

  unless options[:noupdate]
    # generate embedded versions
    JsonOutput.new(config, config[:path][:private], true, db).run

    DesktopHtmlOutput.new(config, config[:path][:private], true).run
    MobileHtmlOutput.new(config, config[:path][:private], true).run

    FillBookmarkletOutput.new(config, config[:path][:private], true).run
    FormBookmarkletOutput.new(config, config[:path][:private], true).run

    ChromeOutput.new(config, config[:path][:private], true).run

    # generate versions for depot
    JsonOutput.new(config, File.join(config[:path][:private], 'depot'), false, db).run

    DesktopHtmlOutput.new(config, File.join(config[:path][:private], 'depot'), false).run
    MobileHtmlOutput.new(config, File.join(config[:path][:private], 'depot'), false).run

    FillBookmarkletOutput.new(config, File.join(config[:path][:private], 'depot'), false).run
    FormBookmarkletOutput.new(config, File.join(config[:path][:private], 'depot'), false).run

    ChromeOutput.new(config, File.join(config[:path][:private], 'depot'), false).run
  end
end

desc 'Change database password'
command :passwd do |c|
  c.action do |global_options, options, args|
    command_passwd(config, options, args);
  end
end

def command_passwd(config, options, args)
  db = Cryptobox::Db.new config[:path][:cryptobox],
    config[:path][:backup],
    config[:cryptobox][:keep_backups],
    Cryptobox::ask_password('Password:', options[:interactive])
  db.load
  db.change_password Cryptobox::ask_password('New password:', options[:interactive]),
    Cryptobox::ask_password('Confirm password:', options[:interactive])
  db.save
end

desc 'Start server application'
command :serve do |c|
  c.action do |global_options, options, args|
    command_serve(config, options, args);
  end
end

def command_serve(config, options, args)
  address = "127.0.0.1"
  port = 22790

  puts "Cryptobox server started at #{address}:#{port}"
  EventMachine.run do
    EventMachine::WebSocket.start(
      :host => address,
      :port => port,
      :secure => true,
      :tls_options => {
        :private_key_file => config[:security][:private_key_path],
        :cert_chain_file => config[:security][:certificate_path],
      :verify_peer => false
    }) do |ws|
      ws.onopen do
        puts "Connection open"

        contents = File.open(File.join(config[:path][:private], 'cryptobox.json'), "r:utf-8") { |f| f.read }

        ws.send(contents)
      end

      ws.onclose { puts "Connection closed" }
    end
  end
end

desc 'Create self signed SSL sertificate (TEMPORARY)'
command :cert do |c|
  c.action do |global_options, options, args|
    command_cert(config, options, args);
  end
end

def command_cert(config, options, args)
  require 'openssl'

  def create_certificate(c='RU', st='Moscow', l='Moscow', host='127.0.0.1', email='s@fomichev.me')
    key = OpenSSL::PKey::RSA.generate(1024)

    ca = OpenSSL::X509::Name.parse("/C=#{c}/ST=#{st}/L=#{l}/O=Cryptobox/OU=Cryptobox/CN=#{host}/emailAddress=#{email}")
    cert = OpenSSL::X509::Certificate.new
    cert.version = 2
    cert.serial = 1
    cert.subject = cert.issuer = ca
    cert.public_key = key.public_key
    cert.not_before = Time.now
    cert.not_after = Time.now + 365 * 24 * 60 * 60

    ef = OpenSSL::X509::ExtensionFactory.new
    ef.subject_certificate = cert
    ef.issuer_certificate = cert
    cert.extensions = [
      #    ef.create_extension("basicConstraints","CA:TRUE", true),
      ef.create_extension("subjectKeyIdentifier", "hash"),
    ]
    cert.add_extension ef.create_extension("authorityKeyIdentifier",
                                           "keyid:always,issuer:always")

    cert.sign key, OpenSSL::Digest::SHA1.new

    return key.to_pem, cert.to_pem
  end

  key, cert = create_certificate

  File.open("cryptobox.key", "w") { |f| f.write key }
  File.open("cryptobox.crt", "w") { |f| f.write cert }
end

exit run(ARGV)
