#!/usr/bin/env ruby

if File.exists?(File.join(File.expand_path('../..', __FILE__), '.git'))
  $:.unshift(File.expand_path('../../lib', __FILE__))
end

require 'trollop'

require 'cryptobox'

def desc(cmd, desc, args='')
  banner "#{desc}\n\nUsage: cryptobox #{cmd}#{cmd ? ' ' : ''}[options] #{args}\n\nOptions:"
end

global_opts = Trollop::options do
  version "Cryptobox #{Cryptobox::VERSION} (c) Stanislav Fomichev"
  desc nil, 'Secure sensitive information manager', '[cat|create|edit|passwd|depot] [options]'
  opt :verbose, 'Be verbose', :short => '-V', :default => false, :short => :none
  opt :no_interactive, 'Open /dev/tty to read password', :short => :none
  opt :config, 'Configuration file path', :short => '-c', :type => :string
  stop_on %w{cat create edit passwd depot}
end

cmd = ARGV.shift
cmd_opts = case cmd
  when "cat"
    Trollop::options do
      desc cmd, 'Print selected entries to the stdout', '[field=value...]'
      opt :key, 'Print value of specific key', :type => :string
    end
  when "create"
    Trollop::options do
      desc cmd, 'Create new empty database'
    end
  when "edit"
    Trollop::options do
      desc cmd, 'Edit encrypted database with text editor'
      opt :no_edit, 'Don\'t start editor, just process current database', :short => :none
      opt :no_update, 'Don\'t process database and generate applications', :short => :none
      opt :stdout, 'Print decrypted data to standard output', :short => :none
      opt :stdin, 'Read decrypted data from standard input', :short => :none
      opt :no_pipe, 'Don\'t use named fifo for data exchange with editor', :short => :none
    end
  when "passwd"
    Trollop::options do
      desc cmd, 'Change database password'
    end
  when "depot"
    Trollop::options do
      desc cmd, 'Start depot server application'
    end
  else
    Trollop::die "unknown subcommand #{cmd.inspect}"
  end

config = Cryptobox::Config.new(global_opts[:config])
$verbose = global_opts[:verbose]
interactive = !global_opts[:no_interactive]

case cmd
when "cat"
  require 'cryptobox/command/cat'
  Cryptobox::Command.cat(config, interactive, cmd_opts[:key], ARGV)
when "create"
  require 'cryptobox/command/create'
  Cryptobox::Command.create(config, interactive)
when "edit"
  require 'cryptobox/command/edit'
  Cryptobox::Command.edit(config, interactive, cmd_opts[:stdout], cmd_opts[:stdin], !cmd_opts[:no_edit], !cmd_opts[:no_update], !cmd_opts[:no_pipe])
when "passwd"
  require 'cryptobox/command/passwd'
  Cryptobox::Command.passwd(config, interactive)
when "depot"
  require 'cryptobox/depot'
  require 'cryptobox/command/depot'
  Cryptobox::Command.depot(config)
end
